name: Deploy to Local Podman

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy-podman:
    name: Build and Deploy with Podman
    runs-on: self-hosted  # Use the local self-hosted runner with Podman pre-installed

    defaults:
      run:
        shell: bash  # Use bash shell on Windows self-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Podman installation
        run: |
          echo "Checking Podman version..."
          podman --version
          "/c/Users/darryl.a.bowler/AppData/Roaming/Python/Python314/Scripts/podman-compose.exe" --version || echo "podman-compose not found"
      
      - name: Build images with Podman
        run: |
          # Build backend image
          podman build -t tasktracker-backend:latest ./backend
          
          # Build frontend image
          podman build -t tasktracker-frontend:latest ./frontend
      
      - name: Create Podman network
        run: |
          podman network create tasktracker-network || true
      
      - name: Deploy PostgreSQL database
        run: |
          podman run -d \
            --name tasktracker-db \
            --network tasktracker-network \
            -e POSTGRES_USER=postgres \
            -e POSTGRES_PASSWORD=postgres \
            -e POSTGRES_DB=tasktracker \
            -p 5432:5432 \
            --health-cmd "pg_isready -U postgres" \
            --health-interval 5s \
            --health-timeout 5s \
            --health-retries 5 \
            postgres:15-alpine
      
      - name: Wait for database to be healthy
        run: |
          echo "Waiting for database to be ready..."
          for i in {1..30}; do
            if podman exec tasktracker-db pg_isready -U postgres > /dev/null 2>&1; then
              echo "Database is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
      
      - name: Deploy backend
        run: |
          podman run -d \
            --name tasktracker-backend \
            --network tasktracker-network \
            -e DATABASE_URL=postgresql://postgres:postgres@tasktracker-db:5432/tasktracker \
            -p 8000:8000 \
            tasktracker-backend:latest
      
      - name: Wait for backend to be ready
        run: |
          echo "Waiting for backend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/tasks > /dev/null 2>&1; then
              echo "Backend is ready!"
              break
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
      
      - name: Deploy frontend
        run: |
          podman run -d \
            --name tasktracker-frontend \
            --network tasktracker-network \
            -e NEXT_PUBLIC_API_URL=http://localhost:8000 \
            -p 3000:3000 \
            tasktracker-frontend:latest
      
      - name: Verify deployment
        run: |
          echo "=== Deployment Summary ==="
          echo "Containers running:"
          podman ps
          
          echo ""
          echo "=== Testing Backend API ==="
          curl -f http://localhost:8000/tasks || (echo "Backend API check failed" && exit 1)
          
          echo ""
          echo "=== Container Logs ==="
          echo "--- Database logs ---"
          podman logs tasktracker-db --tail 20
          echo ""
          echo "--- Backend logs ---"
          podman logs tasktracker-backend --tail 20
          echo ""
          echo "--- Frontend logs ---"
          podman logs tasktracker-frontend --tail 20
      
      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Cleaning up containers..."
          podman stop tasktracker-frontend tasktracker-backend tasktracker-db || true
          podman rm tasktracker-frontend tasktracker-backend tasktracker-db || true
          podman network rm tasktracker-network || true
      
      - name: Deployment successful
        if: success()
        run: |
          echo "=========================================="
          echo "Deployment Complete!"
          echo "=========================================="
          echo "Frontend: http://localhost:3000"
          echo "Backend API: http://localhost:8000"
          echo "API Docs: http://localhost:8000/docs"
          echo "=========================================="
          echo ""
          echo "Containers are running and will remain active."
          echo "To stop containers, run:"
          echo "  podman stop tasktracker-frontend tasktracker-backend tasktracker-db"
